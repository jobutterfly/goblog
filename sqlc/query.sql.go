// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createArticle = `-- name: CreateArticle :execresult
INSERT INTO articles(title, content, date)
VALUES (?, ?, ?)
`

type CreateArticleParams struct {
	Title   string
	Content string
	Date    string
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createArticle, arg.Title, arg.Content, arg.Date)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users(name, password)
VALUES(?, ?)
`

type CreateUserParams struct {
	Name     string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.Name, arg.Password)
}

const deleteArticle = `-- name: DeleteArticle :execresult
DELETE FROM articles
WHERE article_id = ?
`

func (q *Queries) DeleteArticle(ctx context.Context, articleID int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteArticle, articleID)
}

const editArticle = `-- name: EditArticle :execresult
UPDATE articles
SET 
    title = ?,
    content = ?
WHERE article_id = ?
`

type EditArticleParams struct {
	Title     string
	Content   string
	ArticleID int32
}

func (q *Queries) EditArticle(ctx context.Context, arg EditArticleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, editArticle, arg.Title, arg.Content, arg.ArticleID)
}

const getArticle = `-- name: GetArticle :one
SELECT article_id, title, content, date FROM articles
WHERE article_id = ?
LIMIT 1
`

func (q *Queries) GetArticle(ctx context.Context, articleID int32) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticle, articleID)
	var i Article
	err := row.Scan(
		&i.ArticleID,
		&i.Title,
		&i.Content,
		&i.Date,
	)
	return i, err
}

const getArticles = `-- name: GetArticles :many
SELECT article_id, title, content, date FROM articles
ORDER BY date ASC
`

func (q *Queries) GetArticles(ctx context.Context) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, getArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ArticleID,
			&i.Title,
			&i.Content,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNewestArticle = `-- name: GetNewestArticle :one
SELECT article_id, title, content, date FROM articles
ORDER BY date DESC
LIMIT 1
`

func (q *Queries) GetNewestArticle(ctx context.Context) (Article, error) {
	row := q.db.QueryRowContext(ctx, getNewestArticle)
	var i Article
	err := row.Scan(
		&i.ArticleID,
		&i.Title,
		&i.Content,
		&i.Date,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_id, name, password FROM users
WHERE user_id = ?
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(&i.UserID, &i.Name, &i.Password)
	return i, err
}

const getUserName = `-- name: GetUserName :one
SELECT user_id, name, password FROM users
WHERE name = ?
LIMIT 1
`

func (q *Queries) GetUserName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserName, name)
	var i User
	err := row.Scan(&i.UserID, &i.Name, &i.Password)
	return i, err
}
